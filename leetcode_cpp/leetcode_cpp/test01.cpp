//#include <iostream>
//using namespace std;
//
//
////test
//int main() {
//
//	cout << "hello world!" << endl;
//
//	system("pause");
//	return 0;
//}



// struct TreeNode {
//        int val;
//         TreeNode *left;
//         TreeNode *right;
//         TreeNode() : val(0), left(nullptr), right(nullptr) {}
//         TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
//          TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
//  };


// 根据数组构造二叉树
//TreeNode* construct_binary_tree(const vector<int>& vec) {
//    vector<TreeNode*> vecTree(vec.size(), NULL);
//    TreeNode* root = NULL;
//    // 把输入数值数组，先转化为二叉树节点数组
//    for (int i = 0; i < vec.size(); i++) {
//        TreeNode* node = NULL;
//        if (vec[i] != -1) node = new TreeNode(vec[i]); // 用 -1 表示null
//        vecTree[i] = node;
//        if (i == 0) root = node;
//    }
//    // 遍历一遍，根据规则左右孩子赋值就可以了
//    // 注意这里 结束规则是 i * 2 + 2 < vec.size()，避免空指针
//    for (int i = 0; i * 2 + 2 < vec.size(); i++) {
//        if (vecTree[i] != NULL) {
//            // 线性存储转连式存储关键逻辑
//            vecTree[i]->left = vecTree[i * 2 + 1];
//            vecTree[i]->right = vecTree[i * 2 + 2];
//        }
//    }
//    return root;
//}





//**未ac题目
//2-315   449


//**ac了 但没完全懂题目
//9 - 528    



//同类型 暂时未做题目
//10-889


//超纲题目
//1728